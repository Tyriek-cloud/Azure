{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DCAFinesFees",
						"type": "DatasetReference"
					},
					"name": "DCAFinesFesssource"
				},
				{
					"dataset": {
						"referenceName": "DCAPayments",
						"type": "DatasetReference"
					},
					"name": "DCAPaymentssource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ID"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {RECORD ID} as string,",
				"          {RECORD TYPE} as string,",
				"          {BUSINESS NAME} as string,",
				"          {BUSINESS NAME2} as string,",
				"          INDUSTRY as string,",
				"          {FEE SEQUENCE ID} as integer,",
				"          {FEE TYPE} as string,",
				"          {FEE DESCRIPTION} as string,",
				"          {FEE AMOUNT} as double,",
				"          {FEE DATE} as date,",
				"          {FEE STATUS} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DCAFinesFesssource",
				"source(output(",
				"          {RECORD ID} as string,",
				"          {RECORD TYPE} as string,",
				"          {BUSINESS NAME} as string,",
				"          {BUSINESS NAME2} as string,",
				"          INDUSTRY as string,",
				"          {FEE SEQUENCE ID} as integer,",
				"          {FEE TYPE} as string,",
				"          {FEE DESCRIPTION} as string,",
				"          {PAYMENT AMOUNT} as double,",
				"          {PAYMENT DATE} as string,",
				"          {TRANSACTION TYPE} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DCAPaymentssource",
				"select1, select2 join(select1@RECORDID == select2@RECORDID,",
				"     joinType:'outer',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> ID",
				"DCAFinesFesssource select(mapColumn(",
				"          RECORDID = {RECORD ID},",
				"          RECORDTYPE = {RECORD TYPE},",
				"          BUSINESSNAME = {BUSINESS NAME},",
				"          BUSINESSNAME2 = {BUSINESS NAME2},",
				"          INDUSTRY,",
				"          FEESEQUENCEID = {FEE SEQUENCE ID},",
				"          FEETYPE = {FEE TYPE},",
				"          FEEDESCRIPTION = {FEE DESCRIPTION},",
				"          FEEAMOUNT = {FEE AMOUNT},",
				"          FEEDATE = {FEE DATE},",
				"          FEESTATUS = {FEE STATUS}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"DCAPaymentssource select(mapColumn(",
				"          RECORDID = {RECORD ID},",
				"          RECORDTYPE = {RECORD TYPE},",
				"          BUSINESSNAME = {BUSINESS NAME},",
				"          BUSINESSNAME2 = {BUSINESS NAME2},",
				"          INDUSTRY,",
				"          FEESEQUENCEID = {FEE SEQUENCE ID},",
				"          FEETYPE = {FEE TYPE},",
				"          FEEDESCRIPTION = {FEE DESCRIPTION},",
				"          PAYMENTAMOUNT = {PAYMENT AMOUNT},",
				"          PAYMENTDATE = {PAYMENT DATE},",
				"          TRANSACTIONTYPE = {TRANSACTION TYPE}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"ID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          RECORDID as string,",
				"          RECORDTYPE as string,",
				"          BUSINESSNAME as string,",
				"          BUSINESSNAME2 as string,",
				"          INDUSTRY as string,",
				"          FEESEQUENCEID as integer,",
				"          FEETYPE as string,",
				"          FEEDESCRIPTION as string,",
				"          FEEAMOUNT as double,",
				"          FEEDATE as date,",
				"          FEESTATUS as string,",
				"          PAYMENTAMOUNT as double,",
				"          PAYMENTDATE as string,",
				"          TRANSACTIONTYPE as string",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}